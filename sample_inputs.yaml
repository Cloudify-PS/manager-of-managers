# This is a *partial* list of the required inputs. Some should be provided
# via the secret store mechanism (run `cfy secrets create -h` to find out more),
# while others (like the manager password) can be potentially provided in this
# file or via the `-i` option when creating the deployment (e.g.
# `cfy deployments create dep -b bp -i inputs.yaml -i os_password=<GUESS_ME>`)

#####################################################################
# GENERAL INPUTS
#####################################################################

# User name used when SSH-ing into the manager machines
ssh_user: centos

# Path to the private key for the keypair whose name is provided by
# "keypair_name". Path must be accessible from within the Tier 2 manager
ssh_private_key_path: /etc/cloudify/ssh_key

# The CA certificate + key used to sign any auto generated certificates
# (internal and external) - these paths should be relative to the blueprint
ca_cert: files/ca_cert.pem
ca_key: files/ca_key.pem

#####################################################################
# OPENSTACK INPUTS
#####################################################################

# OpenStack image name or ID to use for the new server
os_image: <OPENSTACK_IMAGE_ID>

# OpenStack flavor name or ID to use for the new server
os_flavor: <OPENSTACK_FLAVOR_NAME/ID>

# OpenStack network name or ID the new server will be connected to
os_network: <OPENSTACK_NETWORK_NAME/ID>

# OpenStack key pair name or ID of the key to associate with the new server
os_keypair: <OPENSTACK_KEPAIR_NAME/ID>

# The name or ID of the OpenStack network to use for allocating floating ips
os_floating_network: <OPENSTACK_EXTERNAL_NETWORK_NAME/ID>

# The name or ID of the OpenStack security group the new server will connect to
os_security_group: <OPENSTACK_SECURITY_GROUP_NAME/ID>

#os_project_domain: <OPENSTACK_DOMAIN_NAME/ID>

# Username to authenticate to OpenStack with
os_username: <OPENSTACK_USERNAME>

# OpenStack password
os_password: <OPENSTACK_PASSWORD>  # Can be passed manually to the `cfy` command

# Name of OpenStack tenant to operate on
os_tenant: <OPENSTACK_TENANT>

# Authentication URL for KeyStone
os_auth_url: <OPENSTACK_AUTH_URL>

# OpenStack region to use
os_region: <OPENSTACK_REGION>

#####################################################################
# ADDITIONAL RESOURCES
#####################################################################

# A list of tenants to create on the manager after its installation
tenants:
  - tenant_1
  - tenant_2

# A list of plugins to upload to the manager after its installation
plugins:
  - wagon: https://github.com/cloudify-cosmo/cloudify-openstack-plugin/releases/download/2.5.2/cloudify_openstack_plugin-2.5.2-py27-none-linux_x86_64-centos-Core.wgn
    yaml: https://github.com/cloudify-cosmo/cloudify-openstack-plugin/releases/download/2.5.2/plugin.yaml
    tenant: tenant_1

# A list of secrets to set on the manager after its installation
secrets:
  - key: test_secret_key
    string: test_secret_string
  - key: test_secret_from_file
    file: /etc/cloudify/ssl/cloudify_internal_ca_cert.pem
    visibility: global

# A list of blueprints to create on the manager after its installation
blueprints:
  - path: https://github.com/cloudify-cosmo/cloudify-hello-world-example/archive/master.zip
  - path: https://github.com/cloudify-cosmo/cloudify-hello-world-example/archive/master.zip
    id: second_bp
    filename: singlehost-blueprint.yaml
    tenant: tenant_1
  - path: https://github.com/cloudify-cosmo/cloudify-hello-world-example/archive/master.zip
    id: third_bp
    filename: openstack-blueprint.yaml
    tenant: tenant_2
    visibility: global


#####################################################################
# ADDITIONAL CONFIG
#####################################################################

# An arbitrary dictionary which should mirror the structure of config.yaml
# in https://github.com/cloudify-cosmo/cloudify-manager-install/blob/master/config.yaml
# It will be merged (while taking precedence) with the config as described
# in the cloudify.nodes.CloudifyTier1Manager type in the plugin.yaml file.
# Whenever possible the inputs in the blueprint.yaml file should be used.
additional_config:
  sanity:
    skip_sanity: true
  restservice:
    log:
      level: DEBUG
  mgmtworker:
    log_level: DEBUG


#####################################################################
# UPGRADE INPUTS
#####################################################################

# These inputs are only relevant when upgrading. Use them only when
# installing a new deployment to which you wish to transfer data/agents from
# an old deployment

# Should the newly installed Cloudify Manager be restored from a previous
# installation. Must be used in conjunction with some of the other inputs
# below. See plugin.yaml for more details
restore: false

# Only relevant if `restore` is set to true!
# Must be used in conjunction with `old_deployment_id` (and optionally
# with `snapshot_id`).  If set to true, a snapshot will be created on the old
# deployment (based on `old_deployment_id` and, if passed, on
# `snapshot_id`), and it will be used in the restore workflow
backup: false

# A local (relative to the Tier 2 manager) path to a snapshot that should be
# used. Mutually exclusive with `old_deployment_id` and `snapshot_id`
snapshot_path: ''

# The ID of the previous deployment which was used to control the Tier 1
# managers. If the `backup` workflow was used with default values there will
# be a special folder with all the snapshots from the Tier 1 managers. If the
# `backup` input is set to `false` `snapshot_id` must be provided as well
old_deployment_id: ''

# The ID of the snapshot to use. This is only relevant if `old_deployment_id`
# is provided as well
snapshot_id: ''

# If set to `true`, an `install_new_agents` command will be executed after
# the restore is complete
transfer_agents: true