tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint creates several VMs, installs a Cloudify Manager on each
  of them, creates a Cloudify HA cluster between all the managers and uploads
  several auxiliary resources to the cluster.

imports:
  - http://www.getcloudify.org/spec/cloudify/4.3.dev1/types.yaml

  # Swap the imports in this file to use any other IaaS or infrastructure
  - include/openstack/infra.yaml

  # Other inputs
  - include/general_inputs.yaml
  - include/ldap_inputs.yaml
  - include/additional_inputs.yaml
  - include/upgrade_inputs.yaml

  # Manager of Managers plugin
  - plugins/cmom/plugin.yaml

  # TODO: Implement solution for scenarios where the IPs are not provided by OS
  # TODO: Add an auto-heal policy

node_templates:

  cloudify_manager:
    type: cloudify.nodes.CloudifyTier1Manager
    relationships:
      - type: cloudify.relationships.contained_in
        target: host
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            install_rpm_path: { get_input: install_rpm_path }
            config:
              manager:
                private_ip: { get_attribute: [ host, ip ]}
                public_ip: { get_attribute: [ host, public_ip ] }
                security:
                  ssl_enabled: true
                  admin_username: { get_input: manager_admin_username }
                  admin_password: { get_input: manager_admin_password }
              restservice:
                ldap: { get_input: ldap_config }
            additional_config: { get_input: additional_config }

  cloudify_cluster:
    type: cloudify.nodes.CloudifyTier1Cluster
    relationships:
      - type: cluster_connected_to_manager
        target: cloudify_manager
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          inputs:
            ca_cert: { get_input: ca_cert }
            ca_key: { get_input: ca_key }
            restore: { get_input: restore }
            backup: { get_input: backup }
            snapshot_path: { get_input: snapshot_path }
            old_deployment_id: { get_input: old_deployment_id }
            snapshot_id: { get_input: snapshot_id }
            transfer_agents: { get_input: transfer_agents }
        start:
          inputs:
            tenants: { get_input: tenants }
            plugins: { get_input: plugins }
            secrets: { get_input: secrets }
            blueprints: { get_input: blueprints }

policies:
  scale:
    type: cloudify.policies.scaling
    properties:
      default_instances: { get_input: num_of_instances }
    targets: [manager_group]

outputs:
  cluster_ips:
    description: >
      A list of manager IPs in the cluster (Note: the first IP is the master,
      unless there was an HA failover)
    value: { get_attribute: [ cloudify_cluster, managers ] }
