tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint creates several VMs, installs a Cloudify Manager on each
  of them, creates a Cloudify HA cluster between all the managers and uploads
  several auxiliary resources to the cluster.

imports:
  - http://www.getcloudify.org/spec/cloudify/4.3.1/types.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.8/plugin.yaml

  # Swap the imports in this file to use any other IaaS or infrastructure
  - include/openstack/infra.yaml

  # Other inputs
  - include/general_inputs.yaml
  - include/ldap_inputs.yaml
  - include/additional_inputs.yaml
  - include/upgrade_inputs.yaml

  # Manager of Managers plugin
  # Use the "plugin:" notation if the plugin folder is not included in the
  # blueprint. Otherwise, use the regular path to the plugin.yaml file
  - plugins/cmom/plugin.yaml
#  - plugin:cloudify-manager-of-managers?version=1.4.2

node_templates:
  cloudify_fileserver:
    type: cloudify.nodes.FileServer

  cloudify_manager:
    type: cloudify.nodes.CloudifyTier1Manager
    relationships:
      - type: cloudify.relationships.contained_in
        target: host
      - type: manager_connected_to_fileserver
        target: cloudify_fileserver
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            config:
              manager:
                private_ip: { get_attribute: [ host, ip ]}
                public_ip: { get_attribute: [ host, public_ip ] }
                security:
                  ssl_enabled: true
                  admin_username: { get_input: manager_admin_username }
                  admin_password: { get_input: manager_admin_password }
              restservice:
                ldap: { get_input: ldap_config }
            additional_config: { get_input: additional_config }

  cloudify_cluster:
    type: cloudify.nodes.CloudifyTier1Cluster
    relationships:
      - type: cluster_connected_to_manager
        target: cloudify_manager

groups:
  heal_group:
    members: [host]
    policies:
      host_failure_policy:
        type: cloudify.policies.types.host_failure
        properties:
          service:
            - .*host.*.cpu.total.system
          interval_between_workflows: 600
        triggers:
          auto_heal_trigger:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: heal_tier1_manager
              workflow_parameters:
                node_instance_id: { 'get_property': [ SELF, node_id ] }
                diagnose_value: { 'get_property': [ SELF, diagnose ] }

policies:
  scale:
    type: cloudify.policies.scaling
    properties:
      default_instances: { get_input: num_of_instances }
    targets: [manager_group]

outputs:
  cluster_ips:
    description: The master and the slaves of the Tier 1 cluster
    value: { get_attribute: [ cloudify_cluster, outputs ] }
