plugins:

  # The Manager of Managers plugin is responsible for installing and
  # otherwise handling of Cloudify Managers and HA Clusters

  # The 2 definitions (manager and cluster) differ in their execution context:
  # the manager plugin is executed on the Tier 1 manager, while the cluster
  # plugin is executed on the Tier 2 manager (for operations like creating the
  # cluster and uploading resources to the cluster)

  # The third definition (misc) runs on the same executor as `cluster`, but
  # performs other (miscellaneous) functions, os opposed to directly
  # working with the cluster
  manager:
    executor: host_agent
    source: cmom
    package_name: cloudify-manager-of-managers

  cluster:
    executor: central_deployment_agent
    source: cmom
    package_name: cloudify-manager-of-managers

  misc:
    executor: central_deployment_agent
    source: cmom
    package_name: cloudify-manager-of-managers

node_types:

  cloudify.nodes.CloudifyTier1Manager:
    derived_from: cloudify.nodes.SoftwareComponent
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: manager.cmom.manager.install_rpm
          inputs:
            config:
              description: >
                This is an arbitrary dictionary which should mirror the structure of
                config.yaml in https://github.com/cloudify-cosmo/cloudify-manager-install/blob/master/config.yaml
            additional_config:
              description: >
                An additional dictionary which will be merged with the `config`
                input if provided. Also needs to mirror the structure of
                config.yaml
              default: {}
        configure:
          implementation: manager.cmom.manager.install_manager
          inputs:
            files:
              description: >
                A list of files to copy to the Tier 1 managers after their
                installation. The paths are relative to the Tier 2 manager,
                and need to be accessible by `cfyuser` (i.e. /etc/cloudify/PATH)
              default: { get_input: files }
            scripts:
              description: >
                A list of script paths to run after the manager's installation.
                The paths are relative to the Tier 2 manager, and need to be
                accessible by `cfyuser` (i.e. /etc/cloudify/PATH)
              default: { get_input: scripts }
        stop: cluster.cmom.cluster.remove_from_cluster
#        delete: manager.cmom.manager.delete  # TODO: Is this necessary?

  cloudify.nodes.CloudifyTier1Cluster:
    derived_from: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: cluster.cmom.cluster.start_cluster
          inputs:
            ca_cert:
              description: |
                The CA certificate which will be used to connect to the
                Tier 1 managers via the CLI. This path is relative to the
                Tier 2 manager, and needs to be accessible by `cfyuser`
                (i.e. /etc/cloudify/PATH)
              default: { get_input: ca_cert }
            restore:
              description: |
                If set to true then before creating the cluster first a
                snapshot will be restored on the master Tier 1 manager. Must
                be used in conjunction with some of the below inputs
              type: boolean
              default: { get_input: restore }
            snapshot_path:
              description: |
                A local (relative to the Tier 2 manager) path to a snapshot
                that should be used. Mutually exclusive with `old_deployment_id`
                and `snapshot_id`
              type: string
              default: { get_input: snapshot_path }
            old_deployment_id:
              description: |
                The ID of the previous deployment which was used to control
                the Tier 1 managers. If the `backup` workflow was used with
                default values there will be a special folder with all the
                snapshots from the Tier 1 managers. If the `backup` input
                is set to `false` `snaphot_id` must be provided as well
              type: string
              default: { get_input: old_deployment_id }
            snapshot_id:
              description: |
                The ID of the snapshot to use. This is only relevant if
                `old_deployment_id` is provided as well
              type: string
              default: { get_input: snapshot_id }
            transfer_agents:
              description: |
                If set to `true`, an `install_new_agents` command will be
                executed after the restore is complete
              type: boolean
              default: { get_input: transfer_agents }
            restore_params:
              description: |
                A list of arguments that should be passed to the `cfy snapshots restore`
                command. Available values are (should be passed as-is):
                  --without-deployment-envs
                  --force
                  --restore-certificates
                  --no-reboot
              default: { get_input: restore_params }
        start:
          implementation: cluster.cmom.cluster.add_additional_resources
          inputs:
            tenants:
              description: A list of tenants to create on the Tier 1 manager
              default: { get_input: tenants }
            plugins:
              description: A list of plugins to upload to the Tier 1 manager
              default: { get_input: plugins }
            secrets:
              description: A list of secrets to create on the Tier 1 manager
              default: { get_input: secrets }
            blueprints:
              description: A list of blueprints to upload to the Tier 1 manager
              default: { get_input: blueprints }
        delete: cluster.cmom.cluster.clear_data
      maintenance_interface:
        backup:
          implementation: cluster.cmom.cluster.backup
          inputs:
            snapshot_id:
              description: |
                The ID of the snapshot that will be created. If not specified,
                a snapshot ID based on the current deployemnt and datetime
                will be assigned
              default: ''
            backup_params:
              default: { get_input: backup_params }

  cloudify.nodes.FileServer:
    derived_from: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: misc.cmom.misc.setup_fileserver
          inputs:
            install_rpm_path:
              description: >
                The path to the install RPM which will be used to
                install the Tier 1 managers. This path is relative to the
                Tier 2 manager, and needs to be accessible by `cfyuser`
                (i.e. /etc/cloudify/PATH)
              default: { get_input: install_rpm_path }
            ca_cert:
              description: |
                The CA certificate which will be used to connect to the
                Tier 1 managers via the CLI. This path is relative to the
                Tier 2 manager, and needs to be accessible by `cfyuser`
                (i.e. /etc/cloudify/PATH)
              default: { get_input: ca_cert }
            ca_key:
              description: >
                The key for the above certificate. This path is relative to the
                Tier 2 manager, and needs to be accessible by `cfyuser`
                (i.e. /etc/cloudify/PATH)
              default: { get_input: ca_key }
            scripts:
              description: >
                A list of scripts paths to run after the manager's installation.
                The paths relative to the Tier 2 manager, and needs to be
                accessible by `cfyuser` (i.e. /etc/cloudify/PATH)
              default: { get_input: scripts }
            files:
              description: >
                A list of files to copy to the Tier 1 managers after their
                installation. The paths are relative to the Tier 2 manager,
                and need to be accessible by `cfyuser` (i.e. /etc/cloudify/PATH)
              default: { get_input: files }

        delete: misc.cmom.misc.cleanup_fileserver


# For descriptions of workflow parameters see above
workflows:

  add_resources:
    mapping: cluster.cmom.cluster.workflows.add_resources
    parameters:
      tenants:
        default: []
      plugins:
        default: []
      secrets:
        default: []
      blueprints:
        default: []

  backup:
    mapping: cluster.cmom.cluster.workflows.backup
    parameters:
      snapshot_id:
        default: ''
      backup_params:
        default: { get_input: backup_params }

  heal_tier1_manager:
    mapping: cluster.cmom.cluster.workflows.heal_tier1_manager
    parameters:
      node_instance_id:
        description: Which node instance has failed
      diagnose_value:
        description: Diagnosed reason of failure
        default: Not provided

relationships:

  cluster_connected_to_manager:
    derived_from: cloudify.relationships.connected_to
    target_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        preconfigure: manager.cmom.cluster.add_manager_config
        postconfigure: cluster.cmom.cluster.join_cluster

  manager_connected_to_fileserver:
    derived_from: cloudify.relationships.depends_on
