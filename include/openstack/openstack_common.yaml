dsl_definitions:
  openstack_configuration: &openstack_configuration
    username: { get_input: os_username }
    password: { get_input: os_password }
    tenant_name: { get_input: os_tenant }
    auth_url: { get_input: os_auth_url }
    region: { get_input: os_region }
    # TODO: Uncomment when moving to production env with v3 Keystone
#    project_domain_name: { get_input: os_project_domain }
#    user_domain_name: { get_input: os_user_domain }


node_templates:
  os_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_configuration
      use_external_resource: true
      resource_id: { get_input: os_security_group }

  os_keypair:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      openstack_config: *openstack_configuration
      use_external_resource: true
      resource_id: { get_input: os_keypair }
      private_key_path: { get_input: ssh_private_key_path }

  os_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_configuration
      resource_id: { get_input: os_network }
      use_external_resource: true

  os_server_group:
    type: cloudify.openstack.nodes.ServerGroup
    properties:
      openstack_config: *openstack_configuration
      policy: { get_input: os_server_group_policy }

  # Note here that the `ip` node template and the  `server_connected_to_ip`
  # relationships are provided in another file. This is in order to allow
  # using both dynamic and fixed IPs
  host:
    type: cloudify.openstack.nodes.Server
    properties:
      openstack_config: *openstack_configuration
      agent_config:
        user: { get_input: ssh_user }
        key: { get_property: [ os_keypair, private_key_path ] }
      image: { get_input: os_image }
      flavor: { get_input: os_flavor }
    relationships:
      - type: cloudify.openstack.server_connected_to_keypair
        target: os_keypair
      - type: cloudify.openstack.server_connected_to_ip
        target: ip
      - type: cloudify.openstack.server_connected_to_security_group
        target: os_security_group
      - type: cloudify.openstack.server_connected_to_server_group
        target: os_server_group
      - type: cloudify.relationships.connected_to
        target: os_network
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              security_groups: [{ get_attribute: [ os_security_group, external_name ]}]

