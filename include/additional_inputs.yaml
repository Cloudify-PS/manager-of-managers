# **NOTE** - When mentioning local paths in the context of these inputs, the
# paths in question are paths on the *Tier 2* manager. So if it is desirable
# to upload files from a local location, these files need to be present on the
# Tier 2 manager in advance. Otherwise, URLs may be used freely

inputs:
  tenants:
    description: >
      A list of tenants to create after the manager's installation.
      The format is a simple list of tenant names:
      - <TENANT_NAME_1>
      - <TENANT_NAME_2>
    default: []

  plugins:
    description: >
      A list of plugins to upload to the manager after its installation.
      The format should be as follows:
      - wagon: <WAGON_1>
        yaml: <YAML_1>
        tenant: <TENANT_1>
      - wagon: <WAGON_2>
        yaml: <YAML_2>
        visibility: <VIS_2>
      Where:
        * WAGON is either a URL of a Cloudify Plugin (e.g.
          http://repository.cloudifysource.org/cloudify/wagons/cloudify-openstack-plugin/2.0.1/cloudify_openstack_plugin-2.0.1-py27-none-linux_x86_64-centos-Core.wgn),
          or a local (relative to the Tier 2 manager) path to such wagon (required)
        * YAML is the plugin's plugin.yaml file - again, either URL or local
          path (required)
        * TENANT is the tenant to which the plugin will be uploaded (the tenant
          needs to already exist on the manager - use the above `tenants` input
          to create any tenants in advance). (Optional - default is
          default_tenant)
        * VISIBILITY defines who can see the plugin - must be one of
          [private, tenant, global] (Optional - default is tenant).
      Both WAGON and YAML are *required* fields
      **NOTE** wagon filenames *must not* be changed. Currently, the code
      relies on them being in the original format Wagon creates them it
    default: []

  secrets:
    description: >
      A list of secrets to set on the manager after its installation.
      The format should be as follows:
      - key: <KEY_1>
        string: <STRING_1>
        file: <FILE_1>
        visibility: <VISIBILITY_1>
      Where:
        * KEY is the name of the secret which will then be used by other
          blueprints by the intrinsic `get_secret` function (required)
        * STRING is the string value of the secret [mutually exclusive with FILE]
        * FILE is a local path to a file which contents should be used as the
          secrets value [mutually exclusive with VALUE]
        * TENANT is the tenant to which the secret will be uploaded (the tenant
          needs to already exist on the manager - use the above `tenants` input
          to create any tenants in advance). (Optional - default is
          default_tenant)
        * VISIBILITY defines who can see the secret - must be one of
          [private, tenant, global] (Optional - default is tenant).
      KEY is a *required* field, as well as one (and only one) of STRING or FILE.
    default: []

  blueprints:
    description: >
      A list of additional blueprints to upload to the manager after install.
      The format should be as follows:
      - path: <PATH_1>
        id: <ID_1>
        filename: <FILENAME_1>
        tenant: <TENANT_1>
        visibility: <VISIBILITY_1>
      Where:
        * PATH can be either a local blueprint yaml file, a blueprint
          archive or a url to a blueprint archive (required)
        * ID is the unique identifier for the blueprint (if not specified, the
          name of the blueprint folder/archive will be used
        * FILENAME is the name of an archive's main blueprint file. Only
          relevant when uploading an archive
        * TENANT is the tenant to which the blueprint will be uploaded (the tenant
          needs to already exist on the manager - use the above `tenants` input
          to create any tenants in advance). (Optional - default is
          default_tenant)
        * VISIBILITY defines who can see the secret - must be one of
          [private, tenant, global] (Optional - default is tenant).
    default: []

  scripts:
    description: >
      A list of scripts to run after the manager's installation.
      The format is a simple list of script paths:
      - <SCRIPT_PATH_1>
      - <SCRIPT_PATH_2>
      *NOTE* The paths here are relative to the Tier 2 manager, and need to be
      accessible by `cfyuser`
    default: []